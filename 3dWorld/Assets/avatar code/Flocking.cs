using UnityEngine;
using System.Collections;
//including some .NET for dynamic arrays called List in C#
using System.Collections.Generic;

public class Flocking : MonoBehaviour
{
	// Each vehicle contains a CharacterController which
	// makes it easier to deal with the relationship between
	// movement initiated by the character and the forces
	// generated by contact with the terrain & other game objects.
	private CharacterController myCharacterController = null;
	private Steering steerer = null;
	private FlockManager flockMan = null;
	private Vector3 center = new Vector3(150,0,150);

	// a unique identification number assigned by the flock manager 
	private int index = -1;
	public int Index {
		get { return index; }
		set { index = value; }
	}
	
	//movement variables
	private float gravity = 20.0f;
	private Vector3 moveDirection;

	//steering variable
	private Vector3 steeringForce;
	
	private float safeDistance;
	private Vector3 futurePos;

	//list of nearby flockers
	private List<GameObject> nearFlockers = new List<GameObject> ();
	private List<float> nearFlockersDistances = new List<float> ();
	
	private float[] minMax = new float[4];
	private Vector3 seekPt = new Vector3(159.0f, 41.0f, 214.0f);
	
	public void Start ()
	{
		//get component reference
		myCharacterController = gameObject.GetComponent<CharacterController> ();
		steerer = gameObject.GetComponent<Steering> ();
		moveDirection = transform.forward;
		
		minMax[0] = 92.0f;
		minMax[1] = 300.0f;
		minMax[2] = 20.0f;
		minMax[3] = 380.0f;
		
	}

	// get a reference to the manager's FlockManager component (script)
	public void setFlockManager (GameObject fManager)
	{
		flockMan = fManager.GetComponent<FlockManager> ();
	}

	
	private Vector3 Alignment ()
	{
		return steerer.alignTo (flockMan.FlockDirection);
	}

	
	private Vector3 Cohesion ()
	{
		return steerer.seek (flockMan.Centroid);
	}


	private Vector3 Separation ()
	{
		//empty our lists
		nearFlockers.Clear ();
		nearFlockersDistances.Clear ();
		
		float dist;
		Vector3 dv = Vector3.zero;
		Vector3 closer = Vector3.zero;
		
		for(int i = 0; i < flockMan.Flockers.Count; i++)
		{
			dist = Vector3.Distance(transform.position,flockMan.Flockers[i].transform.position);
			if(dist < flockMan.separationDist && dist > 0)
			{
				nearFlockers.Add(flockMan.Flockers[i]);
				nearFlockersDistances.Add(dist);
			}
		}
		
		for(int j = 0; j < nearFlockers.Count; j++)
		{
			closer = closer + (steerer.flee(nearFlockers[j]) * (1/nearFlockersDistances[j]));
		}
		
		
		dv = closer.normalized * steerer.maxSpeed;
		
		dv = dv - steerer.Velocity;

		return steerer.alignTo(dv);
	}

	private void ClampSteering ()
	{
		if (steeringForce.magnitude > steerer.maxForce) {
			steeringForce.Normalize ();
			steeringForce *= steerer.maxForce;
		}
	}
	
	
	// tether type containment - not very good!
	private Vector3 stayInBounds ( float radius, Vector3 center)
	{
		if(Vector3.Distance(transform.position, center) > radius)
			return steerer.seek (center);
		else
			return Vector3.zero;
	}
	
	
	// Update is called once per frame
	public void Update ()
	{
		CalcSteeringForce ();
		ClampSteering ();
		
		moveDirection = transform.forward * steerer.Speed;
		// movedirection equals velocity
		//add acceleration
		moveDirection += steeringForce * Time.deltaTime;
		//update speed
		steerer.Speed = moveDirection.magnitude;
		if (steerer.Speed != moveDirection.magnitude) {
			moveDirection = moveDirection.normalized * steerer.Speed;
		}
		//orient transform
		if (moveDirection != Vector3.zero)
			transform.forward = moveDirection;
		
		// Apply gravity
		moveDirection.y -= gravity;
		
		//futurePos = transform.position + (transform.forward * steerer.Speed);
		
		// the CharacterController moves us subject to physical constraints
		myCharacterController.Move (moveDirection * Time.deltaTime);
	}



	private void CalcSteeringForce ()
	{
		steeringForce = Vector3.zero;
		steeringForce += steerer.contain(minMax, seekPt) * flockMan.inBoundsWt;
		for(int i = 0; i < flockMan.Obstacles.Length; i++)
		{
			safeDistance = steerer.GetComponent<Steering>().Radius + flockMan.Obstacles[i].GetComponent<Obstacle>().Radius;
			steeringForce += steerer.AvoidObstacle(flockMan.Obstacles[i], safeDistance) * flockMan.avoidWt;
		}
		steeringForce += flockMan.alignmentWt * Alignment ();
		steeringForce += flockMan.cohesionWt * Cohesion ();
		steeringForce += flockMan.separationWt * Separation ();
	}
	
}